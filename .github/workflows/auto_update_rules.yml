name: Auto Update Rules

on:
  issues:
    types: [opened, edited]

jobs:
  create-pr-for-rule-update:
    if: contains(github.event.issue.labels.*.name, '自动化请求') && contains(github.event.issue.labels.*.name, '规则更新') && !contains(github.event.issue.labels.*.name, '增量更新')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Check issue body
        id: issue-body
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body;
            
            // 提取表单字段
            const extractField = (fieldName) => {
              const match = body.match(new RegExp(`### ${fieldName}\\s*\\n\\s*([^\\n]+)`));
              return match ? match[1].trim() : null;
            };
            
            const appName = extractField('应用名');
            const packageName = extractField('包名');
            const activityRule = extractField('Activity规则');
            const userEmail = extractField('您的邮箱');
            const description = body.match(/### 修改说明\\s*\\n\\s*([\\s\\S]+?)(?=###|$)/)?.[1]?.trim();
            
            if (!packageName || !activityRule) {
              core.setFailed('缺少必要的包名或Activity规则信息');
            }
            
            // 如果没有提供邮箱，使用GitHub noreply邮箱
            let finalEmail = userEmail;
            if (!finalEmail || finalEmail == "_No response_") {
              finalEmail = `${context.payload.issue.user.id}+${context.payload.issue.user.login}@users.noreply.github.com`;
            }
            
            return {
              appName,
              packageName, 
              activityRule, 
              userEmail: finalEmail,
              userName: context.payload.issue.user.login,
              description
            };

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create branch
        run: |
          branch_name="automation/update-rules-${{ github.event.issue.number }}"
          git checkout -b $branch_name
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV

      - name: Update XML file
        uses: actions/github-script@v7
        env:
          APP_NAME: ${{ fromJSON(steps.issue-body.outputs.result).appName }}
          PACKAGE_NAME: ${{ fromJSON(steps.issue-body.outputs.result).packageName }}
          ACTIVITY_RULE: ${{ fromJSON(steps.issue-body.outputs.result).activityRule }}
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            // 读取并解析XML文件
            const xmlPath = path.join(process.env.GITHUB_WORKSPACE, 'module', 'immerse_rules.xml');
            let xmlContent = await fs.readFile(xmlPath, 'utf8');
            
            // 检查包是否已存在
            const packagePattern = new RegExp(`<package name="${process.env.PACKAGE_NAME}"[^>]*>`);
            const packageExists = packagePattern.test(xmlContent);
            
            if (packageExists) {
              // 更新现有包的规则 - 先查找注释
              const commentPattern = new RegExp(`(<!--\\s*${process.env.PACKAGE_NAME}[\\s\\S]*?-->\\s*)?<package name="${process.env.PACKAGE_NAME}"[^>]*>[\\s\\S]*?<\\/package>`);
              
              let replacement = `<package name="${process.env.PACKAGE_NAME}" enable="true"\n             activityRule="${process.env.ACTIVITY_RULE}"/>`;
              
              // 如果有应用名，添加或更新注释
              if (process.env.APP_NAME) {
                replacement = `<!-- ${process.env.APP_NAME} (${process.env.PACKAGE_NAME}) -->\n  ${replacement}`;
              }
              
              xmlContent = xmlContent.replace(
                commentPattern,
                replacement
              );
            } else {
              // 添加新包规则
              let newPackage = `<package name="${process.env.PACKAGE_NAME}" enable="true"\n             activityRule="${process.env.ACTIVITY_RULE}"/>`;
              
              // 如果有应用名，添加注释
              if (process.env.APP_NAME) {
                newPackage = `<!-- ${process.env.APP_NAME} -->\n  ${newPackage}`;
              }
              
              // 在最后一个package标签后添加新内容
              xmlContent = xmlContent.replace(/<\/NBIRules>/, `  ${newPackage}\n<\/NBIRules>`);
            }
            
            // 写回文件
            await fs.writeFile(xmlPath, xmlContent, 'utf8');
            console.log('成功更新XML文件');

      - name: Commit changes
        env:
          ISSUE_AUTHOR_NAME: ${{ fromJSON(steps.issue-body.outputs.result).userName }}
          ISSUE_AUTHOR_EMAIL: ${{ fromJSON(steps.issue-body.outputs.result).userEmail }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add module/immerse_rules.xml
          commit_message="Update rules based on issue #${{ github.event.issue.number }}"
          co_author_line="Co-authored-by: $ISSUE_AUTHOR_NAME <$ISSUE_AUTHOR_EMAIL>"
          echo -e "$commit_message\n\n$co_author_line" | git commit -F -

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          title: "规则更新: ${{ fromJSON(steps.issue-body.outputs.result).packageName }}"
          body: |
            close #${{ github.event.issue.number }}

            由Issue #${{ github.event.issue.number }}自动生成
            
            修改内容:
            - 应用名: ${{ fromJSON(steps.issue-body.outputs.result).appName || '未提供' }}
            - 包名: ${{ fromJSON(steps.issue-body.outputs.result).packageName }}
            - 规则: ${{ fromJSON(steps.issue-body.outputs.result).activityRule }}
            - 说明: ${{ fromJSON(steps.issue-body.outputs.result).description || '无详细说明' }}
            
            此PR由自动化工作流创建
          branch: ${{ env.BRANCH_NAME }}
          base: main
          labels: |
            自动化
            更新规则

      - name: Associate PR with Issue
        if: steps.create-pr.outputs.pull-request-number != ''
        uses: actions/github-script@v7
        with:
          script: |
            // 使用创建PR步骤的输出获取PR信息
            const prNumber = ${{ steps.create-pr.outputs.pull-request-number }};
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: `已自动创建PR [#${prNumber}](https://github.com/${context.repo.owner}/${context.repo.repo}/pull/${prNumber}) 来处理此请求。`
            });
